// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: sync.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SyncerClient is the client API for Syncer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SyncerClient interface {
	SetRecord(ctx context.Context, in *SetRecordRequest, opts ...grpc.CallOption) (*SetRecordReply, error)
	ListChanges(ctx context.Context, in *ListChangesRequest, opts ...grpc.CallOption) (*ListChangesReply, error)
	TrackChanges(ctx context.Context, in *TrackChangesRequest, opts ...grpc.CallOption) (Syncer_TrackChangesClient, error)
}

type syncerClient struct {
	cc grpc.ClientConnInterface
}

func NewSyncerClient(cc grpc.ClientConnInterface) SyncerClient {
	return &syncerClient{cc}
}

func (c *syncerClient) SetRecord(ctx context.Context, in *SetRecordRequest, opts ...grpc.CallOption) (*SetRecordReply, error) {
	out := new(SetRecordReply)
	err := c.cc.Invoke(ctx, "/proto.Syncer/SetRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncerClient) ListChanges(ctx context.Context, in *ListChangesRequest, opts ...grpc.CallOption) (*ListChangesReply, error) {
	out := new(ListChangesReply)
	err := c.cc.Invoke(ctx, "/proto.Syncer/ListChanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncerClient) TrackChanges(ctx context.Context, in *TrackChangesRequest, opts ...grpc.CallOption) (Syncer_TrackChangesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Syncer_ServiceDesc.Streams[0], "/proto.Syncer/TrackChanges", opts...)
	if err != nil {
		return nil, err
	}
	x := &syncerTrackChangesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Syncer_TrackChangesClient interface {
	Recv() (*Record, error)
	grpc.ClientStream
}

type syncerTrackChangesClient struct {
	grpc.ClientStream
}

func (x *syncerTrackChangesClient) Recv() (*Record, error) {
	m := new(Record)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SyncerServer is the server API for Syncer service.
// All implementations must embed UnimplementedSyncerServer
// for forward compatibility
type SyncerServer interface {
	SetRecord(context.Context, *SetRecordRequest) (*SetRecordReply, error)
	ListChanges(context.Context, *ListChangesRequest) (*ListChangesReply, error)
	TrackChanges(*TrackChangesRequest, Syncer_TrackChangesServer) error
	mustEmbedUnimplementedSyncerServer()
}

// UnimplementedSyncerServer must be embedded to have forward compatible implementations.
type UnimplementedSyncerServer struct {
}

func (UnimplementedSyncerServer) SetRecord(context.Context, *SetRecordRequest) (*SetRecordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRecord not implemented")
}
func (UnimplementedSyncerServer) ListChanges(context.Context, *ListChangesRequest) (*ListChangesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChanges not implemented")
}
func (UnimplementedSyncerServer) TrackChanges(*TrackChangesRequest, Syncer_TrackChangesServer) error {
	return status.Errorf(codes.Unimplemented, "method TrackChanges not implemented")
}
func (UnimplementedSyncerServer) mustEmbedUnimplementedSyncerServer() {}

// UnsafeSyncerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyncerServer will
// result in compilation errors.
type UnsafeSyncerServer interface {
	mustEmbedUnimplementedSyncerServer()
}

func RegisterSyncerServer(s grpc.ServiceRegistrar, srv SyncerServer) {
	s.RegisterService(&Syncer_ServiceDesc, srv)
}

func _Syncer_SetRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncerServer).SetRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Syncer/SetRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncerServer).SetRecord(ctx, req.(*SetRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syncer_ListChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncerServer).ListChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Syncer/ListChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncerServer).ListChanges(ctx, req.(*ListChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Syncer_TrackChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TrackChangesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SyncerServer).TrackChanges(m, &syncerTrackChangesServer{stream})
}

type Syncer_TrackChangesServer interface {
	Send(*Record) error
	grpc.ServerStream
}

type syncerTrackChangesServer struct {
	grpc.ServerStream
}

func (x *syncerTrackChangesServer) Send(m *Record) error {
	return x.ServerStream.SendMsg(m)
}

// Syncer_ServiceDesc is the grpc.ServiceDesc for Syncer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Syncer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Syncer",
	HandlerType: (*SyncerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetRecord",
			Handler:    _Syncer_SetRecord_Handler,
		},
		{
			MethodName: "ListChanges",
			Handler:    _Syncer_ListChanges_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TrackChanges",
			Handler:       _Syncer_TrackChanges_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sync.proto",
}
